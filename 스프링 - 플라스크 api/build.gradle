plugins {
    id 'org.springframework.boot' version '2.4.1'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {

    // 해당 디펜던시 포함 시 오류발생 문제(중복 포함 오류인듯)로 주석처리
    //compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    //compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    //annotationProcessor 'org.projectlombok\', name: \'lombok\', version: \'1.18.16'
    //compile group: 'org.projectlombok', name: 'lombok', version: '1.18.16'
    //compile 'org.springframework.boot:spring-boot-starter-webflux'
    //compile 'org.projectreactor:reactor-spring:1.0.1.RELEASE'
    //implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'


    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation('org.apache.httpcomponents:httpclient:4.5')
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
}

def webappDir = "$projectDir/src/main/React_Client"

sourceSets {
    main {
        resources {
            srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
        }
    }
}

processResources {
    dependsOn "buildReact"
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task installReact(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install'
    } else {
        commandLine "npm", "audit", "fix"
        commandLine 'npm', 'install'
    }
}

test {
    useJUnitPlatform()
}

bootRun {
    systemProperties System.properties
}
